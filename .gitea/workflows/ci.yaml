name: Galtinn CI/CD

on: [push, pull_request]

env:
  POSTGRES_DB: dusken
  CELERY_BROKER_URL: "redis://redis:6379/0"

jobs:
  build_frontend:
    runs-on: ubuntu-latest
    container: nikolaik/python-nodejs:python3.13-nodejs20
    steps:
      - uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            .cache/pip
            .venv
            frontend/node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/pyproject.toml') }}

      - name: Build frontend
        run: bin/build-frontend

  tests:
    runs-on: ubuntu-latest
    container: nikolaik/python-nodejs:python3.13-nodejs20

    services:
      redis:
        image: redis:latest
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      POSTGRES_DB: dusken
      CELERY_BROKER_URL: "redis://redis:6379/0"

    steps:
      - uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            .cache/pip
            .venv
            frontend/node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/pyproject.toml') }}

      - name: Install system dependencies
        run: apt-get update && apt-get install libsasl2-dev libldap2-dev -y

      - name: Run migrations
        run: uv run manage.py migrate

      - name: Run Django checks
        run: uv run manage.py check

      - name: Run tests with coverage
        run: uv run pytest -v --cov dusken --cov-report term --cov-report xml:coverage.xml

      - name: Run pre-commit
        run: uvx pre-commit run -a

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

#  deploy:
#    runs-on: ubuntu-latest
#    needs: [build_frontend, tests]
#    if: github.ref == 'refs/heads/main'
#
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Setup SSH
#        run: |
#          command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )
#          eval $(ssh-agent -s)
#          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' | ssh-add -
#          mkdir -p ~/.ssh
#          chmod 700 ~/.ssh
#          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
#          chmod 644 ~/.ssh/known_hosts
#
#      - name: Deploy
#        run: ssh gitdeploy@dreamcast.neuf.no "$(< bin/deploy)"
