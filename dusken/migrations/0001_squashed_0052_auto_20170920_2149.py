# Generated by Django 1.11.7 on 2017-11-17 12:40

import datetime
import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.migrations.operations.special
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import django_countries.fields
import mptt.fields
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models

import dusken.managers
import dusken.utils


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0006_require_contenttypes_0002"),
        ("auth", "0007_alter_validators_add_error_messages"),
        ("auth", "0008_alter_user_username_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="DuskenUser",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=30,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[\\w.@+-]+$",
                                "Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.",
                                "invalid",
                            )
                        ],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=30, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=30, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("phone_number", models.CharField(blank=True, max_length=30, null=True)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                ("legacy_id", models.IntegerField(blank=True, null=True)),
                ("street_address", models.CharField(max_length=255)),
                ("street_address_two", models.CharField(blank=True, max_length=255, null=True)),
                ("postal_code", models.CharField(max_length=10)),
                ("city", models.CharField(max_length=100)),
                ("country", django_countries.fields.CountryField(max_length=2)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Addresses",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="GroupProfile",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("posix_name", models.CharField(max_length=255, unique=True)),
                ("group", models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to="auth.Group")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Membership",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MembershipType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=254)),
                ("is_active", models.BooleanField(default=True)),
                ("does_not_expire", models.BooleanField(default=False)),
                ("description", models.TextField(blank=True)),
                ("price", models.IntegerField(default=0, help_text="Price in Ã¸re")),
                ("is_default", models.BooleanField(default=False)),
                ("duration", models.DurationField(blank=True, default=datetime.timedelta(365), null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OrgUnit",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("short_name", models.CharField(blank=True, max_length=128)),
                ("is_active", models.BooleanField(default=True)),
                ("lft", models.PositiveIntegerField(db_index=True, editable=False)),
                ("rght", models.PositiveIntegerField(db_index=True, editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(db_index=True, editable=False)),
                ("groups", models.ManyToManyField(blank=True, to="auth.Group")),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="dusken.OrgUnit",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PlaceOfStudy",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(default="", max_length=255)),
                ("short_name", models.CharField(default="", max_length=16)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="membership",
            name="membership_type",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="dusken.MembershipType"),
        ),
        migrations.AddField(
            model_name="membership",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="memberships",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="duskenuser",
            name="place_of_study",
            field=models.ManyToManyField(blank=True, to="dusken.PlaceOfStudy"),
        ),
        migrations.AddField(
            model_name="duskenuser",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AlterModelOptions(
            name="duskenuser",
            options={},
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="city",
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="country",
            field=django_countries.fields.CountryField(blank=True, max_length=2, null=True),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="postal_code",
            field=models.CharField(blank=True, max_length=10, null=True),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="street_address",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="duskenuser",
            name="stripe_customer_id",
            field=models.CharField(blank=True, max_length=254, null=True),
        ),
        migrations.AlterModelManagers(
            name="orgunit",
            managers=[
                ("objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name="duskenuser",
            name="uuid",
            field=models.UUIDField(default=uuid.uuid4, unique=True),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="username",
            field=models.CharField(
                error_messages={"unique": "A user with that username already exists."},
                help_text="Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.",
                max_length=30,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        "^[\\w.@+-]+$",
                        "Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.",
                    )
                ],
                verbose_name="username",
            ),
        ),
        migrations.CreateModel(
            name="MemberCard",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("card_number", models.IntegerField(unique=True)),
                ("registered_datetime", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="membercards",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="duskenuser",
            name="phone_number_validated",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="orgunit",
            name="admin_groups",
            field=models.ManyToManyField(blank=True, related_name="admin_orgunits", to="auth.Group"),
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="groups",
            field=models.ManyToManyField(blank=True, related_name="member_orgunits", to="auth.Group"),
        ),
        migrations.AddField(
            model_name="orgunit",
            name="slug",
            field=models.SlugField(blank=True, max_length=255, unique=True),
        ),
        migrations.AlterModelManagers(
            name="orgunit",
            managers=[],
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="username",
            field=models.CharField(
                error_messages={"unique": "A user with that username already exists."},
                help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                max_length=150,
                unique=True,
                validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                verbose_name="username",
            ),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="phone_number",
            field=phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="phone_number",
            field=phonenumber_field.modelfields.PhoneNumberField(blank=True, default="", max_length=128),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("uuid", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("price_nok", models.IntegerField(help_text="In Ã¸re")),
                (
                    "payment_method",
                    models.CharField(
                        choices=[("app", "Mobile app"), ("sms", "SMS"), ("card", "Credit card"), ("other", "Other")],
                        default="other",
                        max_length=254,
                    ),
                ),
                (
                    "transaction_id",
                    models.CharField(
                        blank=True,
                        help_text="Stripe charge ID, Kassa event ID, SMS event ID or App event ID",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "product",
                    models.OneToOneField(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="dusken.Membership"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="orders", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="duskenuser",
            name="email_confirmed_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="duskenuser",
            name="email_key",
            field=models.CharField(default=dusken.utils.create_email_key, max_length=40),
        ),
        migrations.AlterModelOptions(
            name="placeofstudy",
            options={"verbose_name": "Place of study", "verbose_name_plural": "Places of study"},
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="city",
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name="city"),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="country",
            field=django_countries.fields.CountryField(blank=True, max_length=2, null=True, verbose_name="country"),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="date_of_birth",
            field=models.DateField(blank=True, null=True, verbose_name="date of birth"),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="legacy_id",
            field=models.IntegerField(blank=True, null=True, verbose_name="legacy id"),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="phone_number",
            field=phonenumber_field.modelfields.PhoneNumberField(
                blank=True, max_length=128, verbose_name="phone number"
            ),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="place_of_study",
            field=models.ManyToManyField(blank=True, to="dusken.PlaceOfStudy", verbose_name="place of study"),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="postal_code",
            field=models.CharField(blank=True, max_length=10, null=True, verbose_name="postal code"),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="street_address",
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name="street address"),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="street_address_two",
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name="street address 2"),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="stripe_customer_id",
            field=models.CharField(blank=True, max_length=254, null=True, verbose_name="stripe customer id"),
        ),
        migrations.AlterField(
            model_name="membercard",
            name="card_number",
            field=models.IntegerField(unique=True, verbose_name="card number"),
        ),
        migrations.AlterField(
            model_name="membercard",
            name="is_active",
            field=models.BooleanField(default=True, verbose_name="is active"),
        ),
        migrations.RenameField(
            model_name="membercard",
            old_name="registered_datetime",
            new_name="registered",
        ),
        migrations.AlterField(
            model_name="membercard",
            name="registered",
            field=models.DateTimeField(blank=True, null=True, verbose_name="registered datetime"),
        ),
        migrations.AlterField(
            model_name="membercard",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="membercards",
                to=settings.AUTH_USER_MODEL,
                verbose_name="user",
            ),
        ),
        migrations.RemoveField(
            model_name="orgunit",
            name="admin_groups",
        ),
        migrations.RemoveField(
            model_name="orgunit",
            name="groups",
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="is_active",
            field=models.BooleanField(default=True, verbose_name="is active"),
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="name",
            field=models.CharField(max_length=255, verbose_name="name"),
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="parent",
            field=mptt.fields.TreeForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="children",
                to="dusken.OrgUnit",
                verbose_name="parent",
            ),
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="short_name",
            field=models.CharField(blank=True, max_length=128, verbose_name="short name"),
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="slug",
            field=models.SlugField(blank=True, max_length=255, unique=True, verbose_name="slug"),
        ),
        migrations.AlterField(
            model_name="placeofstudy",
            name="name",
            field=models.CharField(max_length=255, verbose_name="name"),
        ),
        migrations.AlterField(
            model_name="placeofstudy",
            name="short_name",
            field=models.CharField(max_length=16, verbose_name="short name"),
        ),
        migrations.AddField(
            model_name="orgunit",
            name="admin_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="admin_orgunits",
                to="auth.Group",
                verbose_name="admin group",
            ),
        ),
        migrations.AddField(
            model_name="orgunit",
            name="group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="member_orgunits",
                to="auth.Group",
                verbose_name="group",
            ),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="country",
            field=django_countries.fields.CountryField(blank=True, default="NO", max_length=2, verbose_name="country"),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="phone_number",
            field=phonenumber_field.modelfields.PhoneNumberField(
                blank=True, default="", max_length=128, verbose_name="phone number"
            ),
        ),
        migrations.AlterField(
            model_name="order",
            name="price_nok",
            field=models.IntegerField(help_text="Price in Ã¸re"),
        ),
        migrations.RemoveField(
            model_name="membershiptype",
            name="does_not_expire",
        ),
        migrations.AddField(
            model_name="membershiptype",
            name="expiry_type",
            field=models.CharField(
                choices=[("duration", "Duration"), ("never", "Never"), ("end_of_year", "End of year")],
                default="duration",
                max_length=254,
            ),
        ),
        migrations.AlterField(
            model_name="order",
            name="payment_method",
            field=models.CharField(
                choices=[
                    ("app", "Mobile app"),
                    ("sms", "SMS"),
                    ("card", "Credit card"),
                    ("physical_card", "Physical card"),
                    ("other", "Other"),
                ],
                default="other",
                max_length=254,
            ),
        ),
        migrations.AlterField(
            model_name="order",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="orders",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterModelOptions(
            name="duskenuser",
            options={"verbose_name": "user", "verbose_name_plural": "users"},
        ),
        migrations.RemoveField(
            model_name="duskenuser",
            name="created",
        ),
        migrations.CreateModel(
            name="UserLogMessage",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("message", models.CharField(max_length=500)),
            ],
            options={
                "verbose_name_plural": "User log messages",
                "verbose_name": "User log message",
            },
        ),
        migrations.AlterModelOptions(
            name="duskenuser",
            options={"verbose_name": "User", "verbose_name_plural": "Users"},
        ),
        migrations.AlterModelOptions(
            name="groupprofile",
            options={"verbose_name": "Group profile"},
        ),
        migrations.AlterModelOptions(
            name="membercard",
            options={"verbose_name": "Member card"},
        ),
        migrations.AlterModelOptions(
            name="membership",
            options={
                "default_permissions": ("add", "change", "delete", "view"),
                "verbose_name": "Membership",
                "verbose_name_plural": "Memberships",
            },
        ),
        migrations.AlterModelOptions(
            name="membershiptype",
            options={"verbose_name": "Membership type"},
        ),
        migrations.AlterModelOptions(
            name="order",
            options={
                "default_permissions": ("add", "change", "delete", "view"),
                "verbose_name": "Order",
                "verbose_name_plural": "Orders",
            },
        ),
        migrations.AlterModelOptions(
            name="orgunit",
            options={"verbose_name": "Org unit", "verbose_name_plural": "Org units"},
        ),
        migrations.AlterField(
            model_name="membercard",
            name="registered",
            field=models.DateTimeField(blank=True, null=True, verbose_name="registered"),
        ),
        migrations.AddField(
            model_name="userlogmessage",
            name="changed_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="user_changes",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="userlogmessage",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="log_messages", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="orgunit",
            name="contact_person",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
                verbose_name="contact person",
            ),
        ),
        migrations.AddField(
            model_name="orgunit",
            name="description",
            field=models.TextField(blank=True, default="", verbose_name="description"),
        ),
        migrations.AddField(
            model_name="orgunit",
            name="email",
            field=models.EmailField(blank=True, default="", max_length=254, verbose_name="email"),
        ),
        migrations.AddField(
            model_name="orgunit",
            name="phone_number",
            field=phonenumber_field.modelfields.PhoneNumberField(
                blank=True, default="", max_length=128, verbose_name="phone number"
            ),
        ),
        migrations.AddField(
            model_name="orgunit",
            name="website",
            field=models.URLField(blank=True, default="", verbose_name="website"),
        ),
        migrations.CreateModel(
            name="OrgUnitLogMessage",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("message", models.CharField(max_length=500)),
                (
                    "changed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="org_unit_changes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org_unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="log_messages", to="dusken.OrgUnit"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Org unit log messages",
                "verbose_name": "Org unit log message",
            },
        ),
        migrations.AddField(
            model_name="groupprofile",
            name="description",
            field=models.TextField(blank=True, default=""),
        ),
        migrations.AlterField(
            model_name="groupprofile",
            name="posix_name",
            field=models.CharField(blank=True, default="", max_length=255),
        ),
        migrations.AlterField(
            model_name="membercard",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="member_cards",
                to=settings.AUTH_USER_MODEL,
                verbose_name="user",
            ),
        ),
        migrations.RemoveField(
            model_name="duskenuser",
            name="place_of_study",
        ),
        migrations.AddField(
            model_name="duskenuser",
            name="place_of_study",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dusken.PlaceOfStudy",
                verbose_name="place of study",
            ),
        ),
        migrations.AlterModelOptions(
            name="duskenuser",
            options={
                "default_permissions": ("add", "change", "delete", "view"),
                "verbose_name": "User",
                "verbose_name_plural": "Users",
            },
        ),
        migrations.AlterModelOptions(
            name="membercard",
            options={"default_permissions": ("add", "change", "delete", "view"), "verbose_name": "Member card"},
        ),
        migrations.AddField(
            model_name="order",
            name="member_card",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="orders",
                to="dusken.MemberCard",
            ),
        ),
        migrations.AddField(
            model_name="order",
            name="phone_number",
            field=phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True),
        ),
        migrations.AddField(
            model_name="membershiptype",
            name="slug",
            field=models.SlugField(unique=True),
        ),
        migrations.AddField(
            model_name="groupprofile",
            name="type",
            field=models.CharField(
                blank=True, choices=[("volunteers", "Volunteers"), ("", "Standard")], default="", max_length=255
            ),
        ),
        migrations.AlterField(
            model_name="groupprofile",
            name="group",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, related_name="profile", to="auth.Group"
            ),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="email",
            field=models.EmailField(max_length=254, unique=True, verbose_name="email address"),
        ),
        migrations.RenameField(
            model_name="duskenuser",
            old_name="phone_number_validated",
            new_name="phone_number_confirmed",
        ),
        migrations.AddField(
            model_name="duskenuser",
            name="phone_number_confirmed_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="duskenuser",
            name="phone_number_key",
            field=models.CharField(blank=True, max_length=40, null=True),
        ),
        migrations.AlterField(
            model_name="groupprofile",
            name="created",
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name="groupprofile",
            name="updated",
            field=models.DateTimeField(auto_now=True, db_index=True),
        ),
        migrations.AlterField(
            model_name="membercard",
            name="created",
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name="membercard",
            name="updated",
            field=models.DateTimeField(auto_now=True, db_index=True),
        ),
        migrations.AlterField(
            model_name="membership",
            name="created",
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name="membership",
            name="updated",
            field=models.DateTimeField(auto_now=True, db_index=True),
        ),
        migrations.AlterField(
            model_name="membershiptype",
            name="created",
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name="membershiptype",
            name="updated",
            field=models.DateTimeField(auto_now=True, db_index=True),
        ),
        migrations.AlterField(
            model_name="order",
            name="created",
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name="order",
            name="updated",
            field=models.DateTimeField(auto_now=True, db_index=True),
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="created",
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="updated",
            field=models.DateTimeField(auto_now=True, db_index=True),
        ),
        migrations.AlterField(
            model_name="orgunitlogmessage",
            name="created",
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name="orgunitlogmessage",
            name="updated",
            field=models.DateTimeField(auto_now=True, db_index=True),
        ),
        migrations.AlterField(
            model_name="placeofstudy",
            name="created",
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name="placeofstudy",
            name="updated",
            field=models.DateTimeField(auto_now=True, db_index=True),
        ),
        migrations.AlterField(
            model_name="userlogmessage",
            name="created",
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name="userlogmessage",
            name="updated",
            field=models.DateTimeField(auto_now=True, db_index=True),
        ),
        migrations.AlterModelManagers(
            name="duskenuser",
            managers=[
                ("objects", dusken.managers.DuskenUserManager()),
            ],
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="first_name",
            field=models.CharField(blank=True, max_length=254, verbose_name="first name"),
        ),
        migrations.AlterField(
            model_name="duskenuser",
            name="last_name",
            field=models.CharField(blank=True, max_length=254, verbose_name="last name"),
        ),
        migrations.AlterField(
            model_name="order",
            name="payment_method",
            field=models.CharField(
                choices=[
                    ("app", "Mobile app"),
                    ("sms", "SMS"),
                    ("card", "Credit card"),
                    ("cash_register", "Cash register"),
                    ("other", "Other"),
                ],
                default="other",
                max_length=254,
            ),
        ),
        migrations.AlterField(
            model_name="placeofstudy",
            name="short_name",
            field=models.CharField(blank=True, default="", max_length=16, verbose_name="short name"),
        ),
        migrations.AlterModelOptions(
            name="duskenuser",
            options={
                "default_permissions": ("add", "change", "delete", "view"),
                "verbose_name": "User",
                "verbose_name_plural": "Users",
            },
        ),
        migrations.AlterModelOptions(
            name="groupprofile",
            options={"verbose_name": "Group profile", "verbose_name_plural": "Group profiles"},
        ),
        migrations.AlterModelOptions(
            name="membercard",
            options={
                "default_permissions": ("add", "change", "delete", "view"),
                "verbose_name": "Member card",
                "verbose_name_plural": "Member cards",
            },
        ),
        migrations.AlterModelOptions(
            name="membershiptype",
            options={"verbose_name": "Membership type", "verbose_name_plural": "Membership types"},
        ),
    ]
